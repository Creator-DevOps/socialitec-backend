-- CREATE DATABASE ss;
-- \c ss;
/*
Soporta bien relaciones complejas
Es open source y portable
Compatible con Flask + SQLAlchemy sin restricciones
Se instala f√°cilmente en EC2 
*/

-- USERS


-- User
CREATE TABLE "user" (
    user_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    institucional_email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    user_type SMALLINT NOT NULL, -- 0 = admin, 1 = coordinator, 2 = student
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP
);

-- Admin
CREATE TABLE admin (
    user_id INT PRIMARY KEY,
    position VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES "user"(user_id)
);

-- Coordinator
CREATE TABLE coordinator (
    user_id INT PRIMARY KEY,
    department VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES "user"(user_id)
);

-- Student
CREATE TABLE student (
    user_id INT PRIMARY KEY,
    control_number VARCHAR(50),
    major VARCHAR(100),
    semester INT,
    credits INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES "user"(user_id)
);




-- INSTITUTIONS & PROGRAMS

CREATE TABLE institution (
    institution_id SERIAL PRIMARY KEY,
    institution_name VARCHAR(100),
    description VARCHAR(255),
    phone VARCHAR(20),
    email VARCHAR(100),
    street VARCHAR(100),
    number VARCHAR(10),
    neighborhood VARCHAR(100),
    postal_code VARCHAR(10),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP
);

CREATE TABLE program (
    program_id SERIAL PRIMARY KEY,
    institution_id INT,
    program_name VARCHAR(100),
    description VARCHAR(255),
    activities VARCHAR(255),
    supervisor_name VARCHAR(100),
    supervisor_phone VARCHAR(20),
    supervisor_email VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (institution_id) REFERENCES institution(institution_id)
);




-- REQUESTS

CREATE TABLE request (
    request_id SERIAL PRIMARY KEY,
    student_id INT NOT NULL,
    program_id INT NOT NULL,
    acceptance_status SMALLINT,
    progress_status SMALLINT,
    request_date DATE,
    completed_hours INT DEFAULT 0,
    coordinator_id INT,
    feedback VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES student(user_id),
    FOREIGN KEY (program_id) REFERENCES program(program_id),
    FOREIGN KEY (coordinator_id) REFERENCES coordinator(user_id)
);




-- DOCUMENTS

CREATE TABLE document (
    document_id SERIAL PRIMARY KEY,
    document_type SMALLINT, -- 0 = report, 1 = template, 2 = release_letter
    file_path VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP
);

CREATE TABLE template (
    document_id INT PRIMARY KEY,
    description VARCHAR(255),
    coordinator_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (document_id) REFERENCES document(document_id),
    FOREIGN KEY (coordinator_id) REFERENCES coordinator(user_id)
);

CREATE TABLE report (
    document_id INT PRIMARY KEY,
    request_id INT NOT NULL,
    student_id INT NOT NULL,
    coordinator_id INT,
    report_number SMALLINT NOT NULL,
    status SMALLINT DEFAULT 0,
    feedback VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (document_id) REFERENCES document(document_id),
    FOREIGN KEY (request_id) REFERENCES request(request_id),
    FOREIGN KEY (student_id) REFERENCES student(user_id),
    FOREIGN KEY (coordinator_id) REFERENCES coordinator(user_id)
);

CREATE TABLE release_letter (
    document_id INT PRIMARY KEY,
    request_id INT NOT NULL,
    coordinator_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP,
    FOREIGN KEY (document_id) REFERENCES document(document_id),
    FOREIGN KEY (request_id) REFERENCES request(request_id),
    FOREIGN KEY (coordinator_id) REFERENCES coordinator(user_id)
);